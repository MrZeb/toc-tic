{"version":3,"sources":["index.js"],"names":["Square","props","bgColor","highlighted","console","log","key","value","className","onClick","style","backgroundColor","Board","i","currentSquare","this","squares","winningLine","includes","rows","count","x","row","y","push","renderSquare","React","Component","Game","state","history","Array","fill","coords","stepNumber","xIsNext","sortAscending","winnerInfo","slice","length","lines","a","b","c","winnerToken","calculateWinner","setState","concat","Math","floor","step","current","reverse","status","moves","map","move","desc","fontWeight","jumpTo","filter","square","handleClick","toggleMoveSorting","reversed","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4167c42b.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    const bgColor = props.highlighted ? \"yellow\" : \"white\";\n    console.log(props.highlighted)\n    return (\n        <button key={props.value} className=\"square\" onClick={props.onClick} style={{ backgroundColor: bgColor }}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n\n    renderSquare(i) {\n        const currentSquare = this.props.squares[i];\n        let highlighted;\n\n        console.log(\"winningline: \" + this.props.winningLine + \" current square index: \" + i);\n        if (this.props.winningLine) {\n            highlighted = this.props.winningLine.includes(i);\n        }\n\n        return (\n            <Square key={i}\n                value={currentSquare}\n                highlighted={highlighted}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    render() {\n        let rows = [];\n        let count = 0;\n        for (let x = 0; x < 3; x++) {\n            // new row\n            let row = [];\n            for (let y = 0; y < 3; y++) {\n                // new square\n                row.push(this.renderSquare(count));\n                count++;\n            }\n            rows.push(row);\n        }\n\n        return [<div key=\"1\" className=\"board-row\">{rows[0]}</div>,\n        <div key=\"2\" className=\"board-row\">{rows[1]}</div>,\n        <div key=\"3\" className=\"board-row\">{rows[2]}</div>];\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [7, 8, 9],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return {\n                winningLine: lines[i],\n                winnerToken: squares[a]\n            };\n        }\n    }\n\n    return null;\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n                coords: [null, null],\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n            sortAscending: true,\n            winnerInfo: null\n        }\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n\n        if (this.state.winnerInfo || squares[i]) {\n            return;\n        }\n\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        const winnerInfo = calculateWinner(squares);\n\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                coords: [i % 3, Math.floor(i / 3)],\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n            winnerInfo: winnerInfo,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n            winnerInfo: null,\n        });\n    }\n\n    toggleMoveSorting() {\n        this.setState({\n            sortAscending: !this.state.sortAscending,\n        })\n    }\n\n    render() {\n        const history = this.state.history.slice();\n        const current = history[this.state.stepNumber];\n\n        if (!this.state.sortAscending) {\n            history.reverse();\n        }\n\n        const moves = history.map((step, move) => {\n\n            const desc = move ?\n                \"Go to move # \" + move + ' (' + history[move].coords + ')' :\n                \"Go to game start\";\n\n            let fontWeight = (move === this.state.stepNumber) ? \"bold\" : \"normal\";\n\n            return (\n                <li key={move} style={{ fontWeight: fontWeight }}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            )\n        });\n\n        let status;\n        let winningLine;\n        if (this.state.winnerInfo) {\n            status = 'Winner: ' + this.state.winnerInfo.winnerToken;\n            winningLine = this.state.winnerInfo.winningLine;\n        } else if (current.squares.filter(square => square === null ).length === 0 ) {\n            status = 'Draw!'\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        winningLine={winningLine}\n                        onClick={(i) => this.handleClick(i)} />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <button onClick={() => this.toggleMoveSorting()}>Toggle history direction</button>\n                    {this.state.sortAscending ? <ol>{moves}</ol> : <ol reversed>{moves}</ol>}\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}